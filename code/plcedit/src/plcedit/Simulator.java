/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimulatorViewer.java
 *
 * Created on May 20, 2009, 3:55:22 PM
 */

package plcedit;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JToolBar;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DrawingEditor;
import org.jhotdraw.draw.Figure;

/**
 *
 * @author huangkf
 */
public class Simulator extends javax.swing.JFrame implements ActionListener {
    private Color colourNormal = Color.white;
    private Color colourHilight = Color.yellow;
    private List<JToolBar> editorTools;

    /** Creates new form SimulatorViewer */
    public Simulator(DrawingEditor editor, List<JToolBar> tools) {
        initComponents();
        this.editor = editor;
        this.editorTools = tools;
    }

    private DrawingEditor editor;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableScrollablePane = new javax.swing.JScrollPane();
        VariableTable = new javax.swing.JTable();
        btnStepOnce = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnStepNext = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        VariableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableScrollablePane.setViewportView(VariableTable);

        btnStepOnce.setText("Step Once");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnStepNext.setText("Step Next");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(TableScrollablePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btnReset)
                .add(18, 18, 18)
                .add(btnStepOnce)
                .add(18, 18, 18)
                .add(btnStepNext)
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(TableScrollablePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 247, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnReset)
                    .add(btnStepOnce)
                    .add(btnStepNext))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        editor.getActiveView().clearSelection();
        editor.getActiveView().setEnabled(false);
        editor.setEnabled(false);
        setEnabledToolbars(false);
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        editor.getActiveView().getDrawing().willChange();
        for (Figure item: editor.getActiveView().getDrawing().getChildren())
        {
            item.setAttribute(AttributeKeys.FILL_COLOR, colourNormal);
        }
        editor.getActiveView().getDrawing().changed();
        editor.getActiveView().setEnabled(true);
        setEnabledToolbars(true);
    }//GEN-LAST:event_formWindowClosing

    /**
    * @param args the command line arguments
    */
    /* Disabled section because we do not want this class to execute main
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator(null).setVisible(true);
            }
        });
    }*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane TableScrollablePane;
    private javax.swing.JTable VariableTable;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStepNext;
    private javax.swing.JButton btnStepOnce;
    // End of variables declaration//GEN-END:variables



    private CodeBlockFigure findStartBlock()
    {
        int FigCount = 0;
        CodeBlockFigure startfig = null;

        for (Figure block : editor.getActiveView().getDrawing().getChildren())
        {
            if (((Typed)block).getType() == CodeType.Start)
            {
                startfig = (CodeBlockFigure)block;
                FigCount++;
            }
        }

        if (FigCount == 1)
        {
            return startfig;
        }
        else
        {
            return null;
        }
    }

    //External action performed method
    public void actionPerformed(ActionEvent evt)
    {
        this.setVisible(true);
    }

    private void reset()
    {
        CodeBlockFigure startfigure = findStartBlock();
        startfigure.willChange();
        startfigure.setAttribute(AttributeKeys.FILL_COLOR, colourHilight);
        startfigure.changed();
    }

    private void setEnabledToolbars(boolean isEnabled)
    {
        for (JToolBar toolbar: editorTools)
        {
            toolbar.setEnabled(isEnabled);
            for(Component control: toolbar.getComponents())
            {
                control.setEnabled(isEnabled);
            }
        }
    }
}
