/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimulatorViewer.java
 *
 * Created on May 20, 2009, 3:55:22 PM
 */

package plcedit;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;
import net.christopherschultz.evaluator.EvaluationContext;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DrawingEditor;
import org.jhotdraw.draw.Figure;

import net.christopherschultz.evaluator.Expression;
import net.christopherschultz.evaluator.parser.ExpressionParser;
import net.christopherschultz.evaluator.parser.ParseException;
import net.christopherschultz.evaluator.util.DefaultEvaluationContext;
import net.christopherschultz.evaluator.EvaluationException;
import net.christopherschultz.evaluator.function.BinaryOperator;

/**
 *
 * @author huangkf
 */
public class Simulator extends javax.swing.JFrame implements ActionListener {
    private final Color colourNormal = Color.white;
    private final Color colourHilight = Color.yellow;
    private boolean isClosed = true;
    private int currentIndex = -1;

    private List<JToolBar> editorTools;

    private List<Variable> simVarList = new ArrayList<Variable>();
    private CodeBlockFigure currentBlock;



    /** Creates new form SimulatorViewer */
    public Simulator(DrawingEditor editor, List<JToolBar> tools) {
        initComponents();
        this.editor = editor;
        this.editorTools = tools;
    }

    private DrawingEditor editor;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableScrollablePane = new javax.swing.JScrollPane();
        VariableTable = new javax.swing.JTable();
        btnStepOnce = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnStepNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        VariableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableScrollablePane.setViewportView(VariableTable);

        btnStepOnce.setText("Step Once");
        btnStepOnce.setEnabled(false);
        btnStepOnce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStepOnceActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnStepNext.setText("Step Next");
        btnStepNext.setEnabled(false);
        btnStepNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStepNextActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(TableScrollablePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btnReset)
                .add(18, 18, 18)
                .add(btnStepOnce)
                .add(18, 18, 18)
                .add(btnStepNext)
                .addContainerGap(281, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(TableScrollablePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 247, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnReset)
                    .add(btnStepOnce)
                    .add(btnStepNext))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        editor.getActiveView().clearSelection();
        editor.getActiveView().setEnabled(false);
        editor.setEnabled(false);
        setToolbarsTo(false);
        if (isClosed)
        {
            reset();
            isClosed = false;
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        clearHilightAll();
        editor.getActiveView().setEnabled(true);
        setToolbarsTo(true);
        isClosed = true;
    }//GEN-LAST:event_formWindowClosing

    private void btnStepOnceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStepOnceActionPerformed
            currentIndex = simStep(currentBlock.accociatedcode, currentIndex);


            updateVariableView();

            if (currentIndex == -1) //no instructions remaining
            {
                clearHilightAll();
                currentBlock = takeNextEdge();

                if (currentBlock == null)
                {
                    endOfProgram();
                }
                else
                {
                    currentIndex = -1;
                    hilightBlock(currentBlock);
                }
            }
            else //instructions still remain
            {

            }
        
    }//GEN-LAST:event_btnStepOnceActionPerformed


    private void btnStepNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStepNextActionPerformed
        do
        {
            currentIndex = simStep(currentBlock.accociatedcode, currentIndex);


            updateVariableView();

            if (currentIndex == -1) //no instructions remaining
            {
                clearHilightAll();
                currentBlock = takeNextEdge();
                if (currentBlock == null)
                {
                    endOfProgram();
                }
                else
                {
                    currentIndex = -1;
                    hilightBlock(currentBlock);
                }
            }
        }while (currentIndex != -1);
    }//GEN-LAST:event_btnStepNextActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged


    /**
    * @param args the command line arguments
    */
    /* Disabled section because we do not want this class to execute main
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator(null).setVisible(true);
            }
        });
    }*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane TableScrollablePane;
    private javax.swing.JTable VariableTable;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStepNext;
    private javax.swing.JButton btnStepOnce;
    // End of variables declaration//GEN-END:variables



    private void endOfProgram()
    {
        btnStepNext.setEnabled(false);
        btnStepOnce.setEnabled(false);
        JOptionPane.showMessageDialog(this, "Your program has finished execution.");
    }

    private CodeBlockFigure findStartBlock()
    {
        int FigCount = 0;
        CodeBlockFigure startfig = null;

        for (Figure block : editor.getActiveView().getDrawing().getChildren())
        {
            if (((Typed)block).getType() == CodeType.Start)
            {
                startfig = (CodeBlockFigure)block;
                FigCount++;
            }
        }

        if (FigCount == 1)
        {
            return startfig;
        }
        else
        {
            return null;
        }
    }

    //External action performed method
    public void actionPerformed(ActionEvent evt)
    {
        this.setVisible(true);
    }

    private void reset()
    {
        btnStepNext.setEnabled(true);
        btnStepOnce.setEnabled(true);
        
        simVarList.clear();

        CheckVariables varlist = new CheckVariables(editor.getActiveView().getDrawing().getChildren());

        simVarList.add(new Variable(new StoreObj(new CodeVarType(CodeVarType.VarType.Byte),"PORTA","0"), new Integer(0)));
        simVarList.add(new Variable(new StoreObj(new CodeVarType(CodeVarType.VarType.Byte),"PORTB","0"), new Integer(0)));
        simVarList.add(new Variable(new StoreObj(new CodeVarType(CodeVarType.VarType.Byte),"PORTC","0"), new Integer(0)));
        simVarList.add(new Variable(new StoreObj(new CodeVarType(CodeVarType.VarType.Byte),"PORTD","0"), new Integer(0)));

        for(StoreObj var : varlist.VariableList)
        {
            switch(var.type.getType())
            {
                case Bool:
                    simVarList.add(new Variable(var,false));
                    break;
                case Char:
                    simVarList.add(new Variable(var, (char)0));
                    break;
                case Double:
                    simVarList.add(new Variable(var,0.0));
                    break;
                case Float:
                    simVarList.add(new Variable(var,0.0f));
                    break;
                case Int:
                    simVarList.add(new Variable(var,0));
                    break;
                case Long:
                    simVarList.add(new Variable(var,0));
                    break;
                case Undefined:
                    //don't add anything in this case.
                    break;
            }

        }

        CodeBlockFigure startfigure = findStartBlock();
        if (startfigure == null)
        {
            JOptionPane.showMessageDialog(this, "No Start Block Found!\nCannot start simulation.");
        }
        else
        {
            currentBlock = startfigure; //mark that we are moving to the start block
            clearHilightAll();
            hilightBlock(startfigure);
        }


        updateVariableView();
    }

    /**
     * Highlights a block on the drawing with the assigned colour for highlighting
     * @param block
     */
    private void hilightBlock(CodeBlockFigure block)
    {
        block.willChange();
        block.setAttribute(AttributeKeys.FILL_COLOR, colourHilight);
        block.changed();
    }

    /**
     * Glears hilighting to all blocks
     */
    private void clearHilightAll()
    {
        editor.getActiveView().getDrawing().willChange();
        for (Figure item: editor.getActiveView().getDrawing().getChildren())
        {
            item.setAttribute(AttributeKeys.FILL_COLOR, colourNormal);
        }
        editor.getActiveView().getDrawing().changed();
    }

    /**
     * Disables or enables toolbars
     * @param isEnabled
     */
    private void setToolbarsTo(boolean isEnabled)
    {
        for (JToolBar toolbar: editorTools)
        {
            toolbar.setEnabled(isEnabled);
            for(Component control: toolbar.getComponents())
            {
                control.setEnabled(isEnabled);
            }
        }
    }

    /**
     * Updates the screen list based on the variables
     */
    private void updateVariableView()
    {
        DefaultTableModel model = new DefaultTableModel(new String[]{"Variable", "Value"}, 0);

        for (Variable var : simVarList)
        {
           model.addRow(new String[]{var.identity.identifier, var.value.toString()});
        }

        VariableTable.setModel(model);
    }

    /**
     * Creates an evaluation context in order to evaluate C more advanced functions are not included
     * @return
     */
    private EvaluationContext getContext()
    {
        EvaluationContext context = new DefaultEvaluationContext();
        context.set("+", new BinaryOperator.Add());
        context.set("&&", new BinaryOperator.And());
        context.set("/", new BinaryOperator.Divide());
        context.set("=", new BinaryOperator.Equal());
        context.set(">", new BinaryOperator.Greater());
        context.set(">=", new BinaryOperator.GreaterEqual());
        context.set("<", new BinaryOperator.Less());
        context.set("<=", new BinaryOperator.LessEqual());
        context.set("%", new BinaryOperator.Modulus());
        context.set("*", new BinaryOperator.Multiply());
        context.set("!=", new BinaryOperator.NotEqual());
        context.set("||", new BinaryOperator.Or());
        context.set("-", new BinaryOperator.Subtract());
        context.set("true", new Boolean(true));
        context.set("false", new Boolean(false));

        for (Variable var : simVarList)
        {
            context.set(var.identity.identifier, var.value); //add memory list of variables
            System.out.println("Adding context: " + var.identity.identifier.toString() + " --> [" + var.value + "]" );
        }

        return context;
    }

    /**
     * reads the currentblock we are on and takes the next edge leaving this block based on current variables.
     * @return returns the new edge that we will arrive at if the edge is taken
     */
    private CodeBlockFigure takeNextEdge()
    {
        CodeBlockFigure nextBlock;

        List<DirectedLineConnectionFigure> edges = findEdgesLeaving(currentBlock);


        nextBlock = null;
        
        for (DirectedLineConnectionFigure edge : edges)
        {
            try
            {
                //TODO: HACK for some reason == doesn't work so we'll search and replace that with ="
                String prebuffer = edge.getGuard();
                prebuffer = prebuffer.replace("==", "=");
                //end hack

                Expression expr = ExpressionParser.parseExpression(prebuffer);
                if ((Boolean)expr.evaluate(getContext()))
                {
                    nextBlock = (CodeBlockFigure)edge.getEndFigure();
                    break;
                }
                else
                {
                    System.out.println("Eval false: " + prebuffer);
                }

            }
            catch (ParseException ex)
            {
                System.out.println(ex);
            }
            catch (EvaluationException ex)
            {
                System.out.println(ex);
            }

        }

        return nextBlock;
    }

    /**
     * searches the entire diagram and creates a list of all edges leaving the specified block.
     * @param block
     * @return A list of found edges leaving the block
     */
    private List<DirectedLineConnectionFigure> findEdgesLeaving(CodeBlockFigure block)
    {
        List<DirectedLineConnectionFigure> edges = new ArrayList<DirectedLineConnectionFigure>();

        for(Figure fig : editor.getActiveView().getDrawing().getChildren())
        {
            if (fig instanceof DirectedLineConnectionFigure)
            {
                edges.add((DirectedLineConnectionFigure)fig);
            }
        }

        List<DirectedLineConnectionFigure> departingEdges = new ArrayList<DirectedLineConnectionFigure>();

        for(DirectedLineConnectionFigure edge : edges)
        {
            if (edge.getStartFigure().equals(block))
            {
                departingEdges.add(edge);
            }
        }

        return departingEdges;
    }

    /**
     * Steps through each of the instructions of a block one at a time
     * @param block The block to step through
     * @param lastIndex Which instruction was last processed (can be -1 if not yet executed)
     * @return the index of the instruction processed, or -1 if nothing is processed and you should move to next block
     */
    private int simStep (CodeBlock block, int lastIndex)
    {
        List<StoreObj> storelist = null;
        int executedIndex = -1;
        String strExpression = "";
        String strIdentifier = "";
        EvaluationContext context = null; //evaluation context used to store variables

        if (block instanceof StoreBlock)
        {
            storelist = ((StoreBlock)block).getStores();
            executedIndex = lastIndex+1;

            if (executedIndex >= storelist.size())
            {
                return -1; //signal finished execution
            }

            if (storelist.get(executedIndex).value.equals("<value>"))
            {
                return -1;
            }

            //try and parse the string
            context = getContext();

            //store expression for next part
            strExpression = storelist.get(executedIndex).value;
            strIdentifier = storelist.get(executedIndex).identifier;
        }
        else if (block instanceof OutputBlock)
        {
            context = getContext();
            strExpression = ((OutputBlock)block).getValue();
            strIdentifier = ((OutputBlock)block).getDisplayedPort();
        }
        else if (block instanceof InputBlock)
        {
            context = getContext();
            strIdentifier = ((InputBlock)block).getVariable();
            strExpression = (String)JOptionPane.showInputDialog(this, "Simulation Value For Input:", "0");
            while (strExpression == null)
            {
                strExpression = (String)JOptionPane.showInputDialog(this, "Cannot Be Blank!\n Simulation Value For Input:", "0");
            }
        }


        if (!strExpression.equals("") && context != null)
        {
            try
            {
                Expression expr = ExpressionParser.parseExpression(strExpression);
                Object rawResult = expr.evaluate(context);
                if (rawResult == null)
                {
                    throw new Exception("Uninitialized Variable Encountered, Please Initialize the variable before first use in an expression\n\n" +
                            "Example: \n" +
                            "int var = uninit\n" +
                            "Fixed: \n" +
                            "int uninit = 0 \n" +
                            "int var = uninit\n\n" +
                            "Simulator will now be reset.");
                }
                for(Variable simvar : simVarList)
                {
                    //try and find our entry for this variable (storelist initializer)
                    if (simvar.identity.identifier.equals(strIdentifier))
                    {
                        //update it's value to reflect the changes
                        //we must be careful to recast it to the right type
                        switch(simvar.identity.type.getType())
                        {
                            case Bool:
                                simvar.value = (Boolean)rawResult;
                                break;
                            case Char:
                                simvar.value = (Character)rawResult;
                                break;
                            case Byte:
                                simvar.value = (Integer)(((Integer)rawResult) & (0xFF));
                                break;
                            case Double:
                                simvar.value = (Double)rawResult;
                                break;
                            case Float:
                                simvar.value = (Float)rawResult;
                                break;
                            case Int:
                                simvar.value = (Integer)rawResult;
                                break;
                            case Long:
                                simvar.value = (Long)rawResult;
                                break;
                            case Undefined:
                                throw new RuntimeException("Cannot Cast to an Undefined type!");
                        }
                        break; //we don't need to loop anymore since vars are a set
                    }
                 }

            }
            catch (ParseException ex)
            {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            catch (EvaluationException ex)
            {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, ex.toString());
            }

        }

        return executedIndex;
    }

    /**
     * Executed when a stop condition is reached all step buttons are disabled and user is informed that
     * they have reached the end of the program.
     */
    public void simStop()
    {
        btnStepNext.setEnabled(false);
        btnStepOnce.setEnabled(false);

        JOptionPane.showMessageDialog(this, "The program has terminated.");
    }
}
