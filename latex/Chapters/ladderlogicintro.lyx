#LyX file created by tex2lyx 1.5.3
\lyxformat 247
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard

%introduction to ladder logic
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
chapter{Introduction to Ladder Logic}
\end_layout

\end_inset

 
\end_layout

\begin_layout Section

Background of Ladder Logic
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard

%docment link: http://www.plcs.net/chapters/whatis1.htm
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%reasons for development
\end_layout

\begin_layout Standard


\end_layout

\end_inset

Ladder logic was originally developed to replace physical relays in PLC's. As a result the 
\begin_inset Quotes eld
\end_inset

language
\begin_inset Quotes erd
\end_inset

 resembles a circuit diagram. The left most and right most 
\begin_inset Quotes eld
\end_inset

rung
\begin_inset Quotes erd
\end_inset

 represent power rails analogous to GND and VCC what's placed in between those rungs is the load components/cite
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

ebookmorris
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. In the case of programming the entire logic is created from loads you place inside these power rails.
\end_layout

\begin_layout Standard

Several other conventions are also observed, power always flows from left to right along each rung. Power also flows from top to bottom along the rails. This is counter intuitive since ladder logic is suppose to be analogous to a circuit schematic and there is no implicit ordering in circuits. In addition each run must start with inputs and end with at least one output. Any device that is on a rung is shown in its initial position.
\end_layout

\begin_layout Standard

Modern PLC's operate more like a traditional micro controller and thus the original schematic based language can prove to be awkward to work with.
\end_layout

\begin_layout Standard

The inputs in ladder are referred to as a load and represented by the symbol 
\begin_inset Formula $-\vert ~ ~ \vert-$
\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard

%need reference from tutorial
\end_layout

\begin_layout Standard


\end_layout

\end_inset

Loads are boolean values and can be a negated input using the 
\begin_inset Formula $-\vert/\vert-$
\end_inset

 symbol. In addition an address is usually assigned to each input referring to which port on the physical PLC the input is connected to. Logical and can be formed by having two logical loads on one rung
\begin_inset LatexCommand \cite{ebookmorris}

\end_inset

. Similarily logical or can be formed by creating a branch along one rung as shown in figure. 
\begin_inset ERT
status collapsed

\begin_layout Standard

%figure # %refer to figure here
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\end_layout

\begin_layout Standard

We can define the language of Ladder Logic as follows 
\begin_inset Formula $Q = \langle M,S,C,F,R,P \rangle $
\end_inset


\end_layout

\begin_layout Itemize

M: set of monitored variables. 
\end_layout

\begin_layout Itemize

S: set of state variables. 
\end_layout

\begin_layout Itemize

C: set of controlled outputs.i 
\end_layout

\begin_layout Itemize

R: set of rungs. 
\end_layout

\begin_layout Itemize

P: set of power rails. 
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement ht
wide false
sideways false
status open


\begin_layout Standard

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ./images/intro_fig1.png
	width 100px

\end_inset

 
\end_layout

\begin_layout Caption

Basic Ladder Logic Diagram
\end_layout

\begin_layout Standard


\begin_inset LatexCommand \label{fig:intro_fig1}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The most basic structure of ladder logic is shown in figure 
\begin_inset LatexCommand \ref{fig:intro_fig1}

\end_inset

. We have 
\begin_inset Formula \[M=\lbrace in_1 \rbrace, S=\lbrace out_1 \rbrace, C=\lbrace out_1 \rbrace, R=\lbrace rung_1 \rbrace, P=\lbrace L,R \rbrace.\]
\end_inset

 Note that 
\begin_inset Formula $rung_1$
\end_inset

 is not explicitly labeled in ladder logic but we give it a name here so we may demonstrate our language framework.
\end_layout

\begin_layout Standard

The symantics of figure 
\begin_inset LatexCommand \ref{fig:intro_fig1}

\end_inset

 is then: 
\begin_inset Float table
placement ht
wide false
sideways false
status open


\begin_layout Standard

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Tabular 
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true">
<column alignment="left" valignment="top" rightline="true">
<column alignment="left" valignment="top" rightline="true">
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

Action 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

Result 
\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" topline="true" usebox="none">
\begin_inset Text

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard


\begin_inset Formula $@T(in_1 = true)$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard


\begin_inset Formula $out_1 := true$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption

Semantics for Fig 
\begin_inset LatexCommand \ref{fig:intro_fig1}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset LatexCommand \label{table:table_for_fig1}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Where 
\begin_inset Formula $@T(<condition>)$
\end_inset

 is used to denote the positive edge of a condition becoming true. We also assume negligable delay between the action occuring and the result being asserted.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement ht
wide false
sideways false
status open


\begin_layout Standard

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ./images/intro_fig2.png
	width 100px

\end_inset

 
\end_layout

\begin_layout Caption

Simple AND Logic Diagram
\end_layout

\begin_layout Standard


\begin_inset LatexCommand \label{fig:intro_fig2}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

When multiple actions are connected on the same rung it is interpreted as a logical AND expression. In figure 
\begin_inset LatexCommand \ref{fig:intro_fig2}

\end_inset

 we can expand our model to:
\end_layout

\begin_layout Standard


\begin_inset Formula \[M=\lbrace in_1, in_2 \rbrace, S=\lbrace out_1 \rbrace, C=\lbrace out_1 \rbrace, R=\lbrace rung_1 \rbrace, P=\lbrace L,R \rbrace.\]
\end_inset


\end_layout

\begin_layout Standard

We can see that both 
\begin_inset Formula $in_1$
\end_inset

 and 
\begin_inset Formula $in_2$
\end_inset

 are on 
\begin_inset Formula $rung_1$
\end_inset

. This is interpreted as follows:
\end_layout

\begin_layout Standard


\begin_inset Float table
placement ht
wide false
sideways false
status open


\begin_layout Standard

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Tabular 
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true">
<column alignment="left" valignment="top" rightline="true">
<column alignment="left" valignment="top" rightline="true">
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

Action 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

Result 
\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" topline="true" usebox="none">
\begin_inset Text

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard


\begin_inset Formula $@T(in_1 = true \wedge in_2 = true)$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard


\begin_inset Formula $out_1 := true$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption

Semantics for Fig 
\begin_inset LatexCommand \ref{fig:intro_fig2}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset LatexCommand \label{table:table_for_fig2}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The conditions 
\begin_inset Formula $in_1$
\end_inset

 and 
\begin_inset Formula $in_2$
\end_inset

 are combined to form our composed action 
\begin_inset Formula $@T(in_1 = true \wedge in_2 = true)$
\end_inset

 as seen in table 
\begin_inset LatexCommand \ref{table:table_for_fig2}

\end_inset

. We also note that there is no action for each individual condition becoming true.
\end_layout

\end_body
\end_document
